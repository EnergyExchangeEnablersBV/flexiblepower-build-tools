--<ScriptOptions statementTerminator="%"/>

DROP FUNCTION PWMEVENT.getDemandArray%

DROP FUNCTION PWMEVENT.getPriceArray%

DROP PROCEDURE PWMEVENT.getBidCurve%

ALTER TABLE PWMEVENT.BidData DROP CONSTRAINT BidCurveData_MarketBasisData_FK%

ALTER TABLE PWMEVENT.PriceData DROP CONSTRAINT PriceData_MarketBasisData_FK%

ALTER TABLE PWMEVENT.MarketBasisData DROP CONSTRAINT MarketBasisData_PK%

DROP VIEW PWMEVENT.LatestBid%

DROP VIEW PWMEVENT.LatestPrice%

DROP TABLE PWMEVENT.BidData%

DROP TABLE PWMEVENT.MarketBasisData%

DROP TABLE PWMEVENT.PriceData%

DROP TYPE PWMEVENT.realArray%

DROP SCHEMA PWMEVENT RESTRICT%

CREATE SCHEMA PWMEVENT%

CREATE TYPE PWMEVENT.realArray AS REAL ARRAY [1024]%

CREATE TABLE PWMEVENT.BidData (
		clusterId VARCHAR(64) NOT NULL,
		agentId VARCHAR(64) NOT NULL,
		qualifier VARCHAR(16) NOT NULL,
		marketBasisId INTEGER NOT NULL,
		createTimestamp TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
		timestamp TIMESTAMP NOT NULL,
		minDemand REAL NOT NULL,
		maxDemand REAL NOT NULL,
		effectivePrice REAL NOT NULL,
		effectiveDemand REAL NOT NULL,
		stepPrice REAL,
		demandFactor REAL NOT NULL,
		demandCurve VARCHAR (2048) FOR BIT DATA,
		daynum INTEGER NOT NULL GENERATED ALWAYS AS ((INTEGER(DATE(createTimestamp))))
	)
	ORGANIZE BY DIMENSIONS (
	(clusterId),  
	(daynum))
	DATA CAPTURE NONE%

CREATE TABLE PWMEVENT.MarketBasisData (
		id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 NO CYCLE CACHE 20),
		clusterId VARCHAR(64) NOT NULL,
		createTimestamp TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
		commodity VARCHAR(16) NOT NULL,
		currency CHAR(3) NOT NULL,
		minPrice REAL NOT NULL,
		maxPrice REAL NOT NULL,
		priceSteps SMALLINT NOT NULL
	)
	DATA CAPTURE NONE%

CREATE TABLE PWMEVENT.PriceData (
		clusterId VARCHAR(64) NOT NULL,
		agentId VARCHAR(64) NOT NULL,
		qualifier VARCHAR(16) NOT NULL,
		marketBasisId INTEGER NOT NULL,
		createTimestamp TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
		timestamp TIMESTAMP NOT NULL,
		marketPrice REAL NOT NULL,
		daynum INTEGER NOT NULL GENERATED ALWAYS AS ((INTEGER(DATE(createTimestamp))))
	)
	ORGANIZE BY DIMENSIONS (
	(clusterId),  
	(daynum))
	DATA CAPTURE NONE%

ALTER TABLE PWMEVENT.MarketBasisData ADD CONSTRAINT MarketBasisData_PK PRIMARY KEY
	(id)%

ALTER TABLE PWMEVENT.BidData ADD CONSTRAINT BidCurveData_MarketBasisData_FK FOREIGN KEY
	(marketBasisId)
	REFERENCES PWMEVENT.MarketBasisData
	(id)
	ON DELETE RESTRICT%

ALTER TABLE PWMEVENT.PriceData ADD CONSTRAINT PriceData_MarketBasisData_FK FOREIGN KEY
	(marketBasisId)
	REFERENCES PWMEVENT.MarketBasisData
	(id)
	ON DELETE RESTRICT%

CREATE VIEW PWMEVENT.LatestBid (clusterId, agentId, qualifier, timestamp, minDemand, maxDemand, effectiveDemand, effectivePrice, marketBasisId) AS
SELECT evt.clusterId as "clusterId", evt.agentId as "agentId", evt.qualifier as "qualifier", evt.timestamp as "timestamp", evt.minDemand as "minDemand", evt.maxDemand as "maxDemand", evt.effectiveDemand as "effectiveDemand", evt.effectivePrice as "effectivePrice", evt.marketBasisId as "marketBasisId" FROM PWMEVENT.BidData evt JOIN 
(SELECT part.clusterId, part.agentId, part.qualifier, MAX(part.createTimestamp) AS lastTimestamp FROM PWMEVENT.BidData part WHERE part.daynum = INTEGER(CURRENT DATE) GROUP BY part.clusterId, part.agentId, part.qualifier) last
ON evt.createTimestamp = last.lastTimestamp AND evt.clusterId = last.clusterId AND evt.agentId = last.agentId AND evt.qualifier = last.qualifier%

CREATE VIEW PWMEVENT.LatestPrice (clusterId, agentId, qualifier, timestamp, marketPrice, marketBasisId) AS
SELECT evt.clusterId as "clusterId", evt.agentId as "agentId", evt.qualifier as "qualifier", evt.timestamp as "timestamp", evt.marketPrice as "marketPrice", evt.marketBasisId as "marketBasisId" FROM PWMEVENT.PriceData evt JOIN 
(SELECT part.clusterId, part.agentId, part.qualifier, MAX(part.createTimestamp) AS lastTimestamp FROM PWMEVENT.PriceData part WHERE part.daynum = INTEGER(CURRENT DATE) GROUP BY part.clusterId, part.agentId, part.qualifier) last
ON evt.createTimestamp = last.lastTimestamp AND evt.clusterId = last.clusterId AND evt.agentId = last.agentId AND evt.qualifier = last.qualifier%

CREATE FUNCTION PWMEVENT.getDemandArray
     (IN  clusterIdParam VARCHAR (64), IN agentIdParam VARCHAR (64), IN qualifierParam VARCHAR (16), IN tsParam TIMESTAMP)
     RETURNS PWMEVENT.realArray
     LANGUAGE SQL
     NO EXTERNAL ACTION
BEGIN
	declare demandCurve VARCHAR (2048) FOR BIT DATA;
	declare demandFactor, minPrice, maxPrice, minDemand, maxDemand, stepPrice REAL;
	declare demandArray PWMEVENT.realArray;
	declare priceSteps, step, stepIndex SMALLINT;
	declare value INTEGER;
	
	set demandCurve = (select bid.demandCurve from pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam and bid.timestamp = timestamp(tsParam) FETCH FIRST 1 ROW ONLY);
	set demandFactor = (select bid.demandFactor from pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam and bid.timestamp = timestamp(tsParam) FETCH FIRST 1 ROW ONLY);
	set stepPrice = (select bid.stepPrice from pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam and bid.timestamp = timestamp(tsParam) FETCH FIRST 1 ROW ONLY);
	set priceSteps = (select mb.priceSteps from pwmevent.marketbasisdata mb, pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam  and bid.timestamp = timestamp(tsParam) and mb.id = bid.marketBasisId FETCH FIRST 1 ROW ONLY);
	set step = 0;
	if demandCurve is not null then
	  while (step < priceSteps) do
		set value = ascii(substrb(demandCurve, step * 2 + 1, 1)) * 256 + ascii(substrb(demandCurve, step * 2 + 2, 1));
		if value > 32767 then
		  set value = -65536 + value;
		end if;
		set step = step + 1;
		set demandArray[step] = demandFactor * value;
	  end while;
	else if stepPrice is not null then
	  set minPrice = (select mb.minPrice from pwmevent.marketbasisdata mb, pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam  and bid.timestamp = timestamp(tsParam) and mb.id = bid.marketBasisId FETCH FIRST 1 ROW ONLY);
	  set maxPrice = (select mb.maxPrice from pwmevent.marketbasisdata mb, pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam  and bid.timestamp = timestamp(tsParam) and mb.id = bid.marketBasisId FETCH FIRST 1 ROW ONLY);
	  set minDemand = (select bid.minDemand from pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam and bid.timestamp = timestamp(tsParam) FETCH FIRST 1 ROW ONLY);
	  set maxDemand = (select bid.maxDemand from pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam and bid.timestamp = timestamp(tsParam) FETCH FIRST 1 ROW ONLY);
	  set stepIndex = ((stepPrice - minPrice) / (maxPrice - minPrice)) * (priceSteps - 1);
	  while (step < stepIndex) do
		set step = step + 1;
		set demandArray[step] = maxDemand;
	  end while;
	  while (step < priceSteps) do
		set step = step + 1;
		set demandArray[step] = minDemand;
	  end while;
	end if;
	end if;
	return demandArray;
END%

CREATE FUNCTION PWMEVENT.getPriceArray
     (IN  clusterIdParam VARCHAR (64), IN agentIdParam VARCHAR (64), IN qualifierParam VARCHAR (16), IN tsParam TIMESTAMP)
     RETURNS PWMEVENT.realArray
     LANGUAGE SQL
     NO EXTERNAL ACTION
BEGIN
	declare minPrice, maxPrice, price REAL;
	declare priceArray PWMEVENT.realArray;
	declare priceSteps, step SMALLINT;
	
	set priceSteps = (select mb.priceSteps from pwmevent.marketbasisdata mb, pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam  and bid.timestamp = timestamp(tsParam) and mb.id = bid.marketBasisId FETCH FIRST 1 ROW ONLY);
	set minPrice = (select mb.minPrice from pwmevent.marketbasisdata mb, pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam  and bid.timestamp = timestamp(tsParam) and mb.id = bid.marketBasisId FETCH FIRST 1 ROW ONLY);
	set maxPrice = (select mb.maxPrice from pwmevent.marketbasisdata mb, pwmevent.biddata as bid where bid.daynum = integer(date(tsParam)) and bid.clusterId = clusterIdParam and bid.agentId = agentIdParam and bid.qualifier = qualifierParam  and bid.timestamp = timestamp(tsParam) and mb.id = bid.marketBasisId FETCH FIRST 1 ROW ONLY);
	set step = 0;
	while (step < priceSteps) do
	  set price = minPrice + ((maxPrice - minPrice) * step) / (priceSteps - 1);
	  set step = step + 1;
	  set priceArray[step] = price;
	end while;
	return priceArray;
END%

CREATE PROCEDURE PWMEVENT.getBidCurve(IN clusterIdParam VARCHAR (64), IN agentIdParam VARCHAR (64), IN qualifierParam VARCHAR (16), IN tsIn  VARCHAR (32))
 LANGUAGE SQL 
 DYNAMIC RESULT SETS 1 
 BEGIN 
	DECLARE price PWMEVENT.realArray;
    DECLARE demand PWMEVENT.realArray;
	DECLARE tsParam TIMESTAMP;
 	SET tsParam= timestamp(replace(tsIn,'T',' '));
	SET price = PWMEVENT.getPriceArray(clusterIdParam, agentIdParam, qualifierParam, tsParam);
	SET demand = PWMEVENT.getDemandArray(clusterIdParam, agentIdParam, qualifierParam, tsParam);
	BEGIN
		DECLARE C1 CURSOR WITH RETURN  FOR SELECT t.index - 1 as step, t.price, t.demand FROM UNNEST(price,demand) WITH ORDINALITY AS t(price, demand, index);
       		OPEN C1;
	END;
 RETURN; 
END%

COMMENT ON COLUMN PWMEVENT.BidData.agentId IS
'ID of the agent that is sending the bid, or the matcher that is aggregating the bid, depending on qualifier.
The agent ID is unique within the cluster.'%

COMMENT ON COLUMN PWMEVENT.BidData.clusterId IS
'ID of the PowerMatcher cluster.'%

COMMENT ON COLUMN PWMEVENT.BidData.createTimestamp IS
'Timestamp when the row was created. The timestamp is in local time.'%

COMMENT ON COLUMN PWMEVENT.BidData.daynum IS
'Generated column for multi-dimensional clustering by day number (YYYYMMDD) of createTimestamp.'%

COMMENT ON COLUMN PWMEVENT.BidData.demandCurve IS
'A vector of small integers (one for each price step) in big endian order (most significant byte first) representing the bid curve.
Each value is multiplied by demandFactor to obtain the actual demand for the step in the bid curve.'%

COMMENT ON COLUMN PWMEVENT.BidData.demandFactor IS
'The demand multiplication factor for the small integers in the demandCurve vector.'%

COMMENT ON COLUMN PWMEVENT.BidData.effectiveDemand IS
'Demand at effectivePrice for the bid curve of this event.'%

COMMENT ON COLUMN PWMEVENT.BidData.effectivePrice IS
'Market price in effect at the time of bid, as received by the agent.'%

COMMENT ON COLUMN PWMEVENT.BidData.marketBasisId IS
'The identity of the MarketBasis row associated with this Bid.'%

COMMENT ON COLUMN PWMEVENT.BidData.maxDemand IS
'Maximum demand (demand at minimum price) in the bid curve.'%

COMMENT ON COLUMN PWMEVENT.BidData.minDemand IS
'Minimum demand (demand at maximum price) in the bid curve.'%

COMMENT ON COLUMN PWMEVENT.BidData.qualifier IS
'Role associated with the bid, for example "agent" or "matcher".'%

COMMENT ON COLUMN PWMEVENT.BidData.stepPrice IS
'If the bid curve can be represented as a single step from maxDemand to minDemand, this column represents the step price.
If stepPrice is null, the bid curve has multiple steps and cannot be represented as a single step.'%

COMMENT ON COLUMN PWMEVENT.BidData.timestamp IS
'Source timestamp for the event, in UTC.'%

COMMENT ON COLUMN PWMEVENT.MarketBasisData.clusterId IS
'ID of the PowerMatcher cluster.'%

COMMENT ON COLUMN PWMEVENT.MarketBasisData.commodity IS
'Commodity for the market basis, for example "electricity".'%

COMMENT ON COLUMN PWMEVENT.MarketBasisData.createTimestamp IS
'Timestamp when the row was created. The timestamp is in local time.'%

COMMENT ON COLUMN PWMEVENT.MarketBasisData.currency IS
'3 character international currency code, for example "EUR".'%

COMMENT ON COLUMN PWMEVENT.MarketBasisData.id IS
'Generated unique identity for the MarketBasis row.'%

COMMENT ON COLUMN PWMEVENT.MarketBasisData.maxPrice IS
'Maximum price defined for this market basis.'%

COMMENT ON COLUMN PWMEVENT.MarketBasisData.minPrice IS
'Minimum price defined for this market basis.'%

COMMENT ON COLUMN PWMEVENT.MarketBasisData.priceSteps IS
'Number of price steps between minimum and maximum price.'%

COMMENT ON COLUMN PWMEVENT.PriceData.agentId IS
'ID of the agent that is the receiving the price, or the matcher that is sending the price, depending on qualifier.
The agent ID is unique within the cluster.'%

COMMENT ON COLUMN PWMEVENT.PriceData.clusterId IS
'ID of the PowerMatcher cluster.'%

COMMENT ON COLUMN PWMEVENT.PriceData.createTimestamp IS
'Timestamp when the row was created. The timestamp is in local time.'%

COMMENT ON COLUMN PWMEVENT.PriceData.daynum IS
'Generated column for multi-dimensional clustering by day number (YYYYMMDD) of createTimestamp.'%

COMMENT ON COLUMN PWMEVENT.PriceData.marketBasisId IS
'The identity of the MarketBasis row associated with this Bid.'%

COMMENT ON COLUMN PWMEVENT.PriceData.marketPrice IS
'The market price for the event.'%

COMMENT ON COLUMN PWMEVENT.PriceData.qualifier IS
'Role associated with the price event, for example "agent" or "matcher".'%

COMMENT ON COLUMN PWMEVENT.PriceData.timestamp IS
'Source timestamp for the event, in UTC.'%

COMMENT ON FUNCTION PWMEVENT.getDemandArray IS
'Function that returns the demand array or step curve encoded in a BidData row as an array of real.'%

COMMENT ON FUNCTION PWMEVENT.getPriceArray IS
'Function that returns the market basis price range for a BidData row as an array of real.'%

COMMENT ON PROCEDURE PWMEVENT.getBidCurve IS
'Procedure that returns the bid curve encoded in a BidData row as a price to demand table as a dynamic result set'%

COMMENT ON TABLE PWMEVENT.BidData IS
'PowerMatcher Bid event data.'%

COMMENT ON TABLE PWMEVENT.MarketBasisData IS
'PowerMatcher MarketBasis data associated with Price or Bid event.'%

COMMENT ON TABLE PWMEVENT.PriceData IS
'PowerMatcher Price event data.'%

