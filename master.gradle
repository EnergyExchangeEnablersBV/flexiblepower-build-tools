import aQute.bnd.deployer.repository.*
import java.io.*
import java.util.zip.*

/* Add bnd as a script dependency */
buildscript {
  dependencies {
    classpath files(bndURI, bndRepoURI)
  }
}

/* Load the BndPlugin class */
apply from: buildscript.classLoader.getResource('aQute/bnd/gradle/BndPlugin.gradle')

def bndProjects() {
	subprojects.findAll { bndWorkspace.getProject(it.name) != null }
}

/* Configure the subprojects */
subprojects {
  def bndProject = bndWorkspace.getProject(name)
  if (bndProject != null) {
    plugins.apply BndPlugin
 
 	ext.baseDir = "${releaseDir}/${name}/${workingBranch}/${qualifier}"
 	bndProject.setProperty("qualifier", qualifier)
 
    repositories {
      jcenter()
    }

    apply plugin: 'jacoco'
    jacoco {
      toolVersion = "0.7.1.201405082137"
      reportsDir = file("$buildDir/jacoco")
    }
  
    jacocoTestReport {
      additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
      reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/jacoco/html"
      }
    }

    apply plugin: 'checkstyle'
    checkstyle {
    	configFile = file("${cnf.projectDir}/gradle/checkstyle.xml")
    	ignoreFailures = true
    	showViolations = false
    }
  }
}

ext.deploymentDir = file("${releaseDir}/${project.name}/${workingBranch}/${qualifier}")

task(cleanDeployment, type: Delete) {
	delete "${deploymentDir.absolutePath}"

	doLast {
		deploymentDir.mkdirs()
	}
}

task(releaseBundles) {
	dependsOn bndProjects().build
	
	doFirst {
		def publishRepo = new LocalIndexedRepo();
		def repoDir = new File(deploymentDir, "repo")
		if(!repoDir.exists()) {
			repoDir.mkdirs()
		}
		publishRepo.setProperties([
			"local": repoDir.absolutePath,
			"readonly": "false",
			"pretty": "true",
			"overwrite": "true"
		])
		bndProjects().each{
			def generatedFile = "${it.buildDir}/${it.name}.jar".toString()
			publishRepo.put(new FileInputStream(generatedFile), null) 
		}
	}
}

task(generateSourceZip, type: Zip) {
	from '.'
	include '*/src/**'
	include '*/test/**'
	include '*/res/**'
	include '*/*.bnd'
	include '*/build*.xml'
	include 'cnf*/**'
	exclude 'cnf*/cache/**'
	exclude 'cnf*/gradle/**'
	exclude 'cnf*/release/**'
	exclude '.metadata'
	exclude '.gradle'
	exclude 'RemoteSystemsTempFiles'
	destinationDir = deploymentDir
	archiveName = "${project.name}-sources-${qualifier}.zip"
}

task(generateBundleZip, type: Zip, dependsOn: releaseBundles) {
	from "${deploymentDir.absolutePath}/repo"
	include '**'
	destinationDir = deploymentDir
	archiveName = "${project.name}-bundles-${qualifier}.zip"
}

task(generateJavadoc, type: Javadoc) {
	def classes = fileTree('.') {
		include '*.api*/**/*.java'
		exclude '*.test/*'
		exclude '**/*Test.java'
	}
	source = classes
	enabled = !classes.empty 
	destinationDir = file("${deploymentDir.absolutePath}/javadoc")
	options {
		classpath file(bndURI)
		classpath fileTree('cnf/cache') {
			include '**/*.jar'
		}.getFiles().toArray(new File[0])
		encoding = 'UTF-8'
		windowTitle = project.name
		showFromProtected()
		addStringOption("sourcepath", "")
	}
}

task(generateJavadocZip, type: Zip, dependsOn: generateJavadoc) {
	from "${deploymentDir.absolutePath}/javadoc"
	include '**'
	destinationDir = deploymentDir
	archiveName = "${project.name}-javadoc-${qualifier}.zip"
}

// These methods are used to generate a deployment zip file
def zipDir(ZipOutputStream zos, File dir) {
	def topDirLength = dir.absolutePath.length() + 1
	dir.eachFileRecurse { file ->
		def relative = file.absolutePath.substring(topDirLength).replaceAll('\\\\', '/')
		if ( file.isDirectory() && !relative.endsWith('/')){
			relative += "/"
		}

		ZipEntry entry = new ZipEntry(relative)
		entry.time = file.lastModified()
		zos.putNextEntry(entry)
		if(file.isFile()) {
			zos << new FileInputStream(file)
		}
	}
}

def zipFiles(ZipOutputStream zos, Iterable files, String baseDir) {
	return files.collect { file ->
		def name = "${baseDir}/${file.name}"
		zos.putNextEntry(new ZipEntry(name))
		zos << new FileInputStream(file)
		return name
	}
}

def downloadRepo(ZipOutputStream zos, String url) {
	def repo = new FixedIndexedRepo()
	repo.setProperties(["locations": url])
	zipFiles(zos,
	         repo.list(null).collect {
	             bsn -> repo.get(bsn, repo.versions(bsn).last().toString())
	         }.flatten(),
	         "bundles/ext");
}

def copyRelease(ZipOutputStream zos) {
	zipFiles(zos,
	         fileTree("${deploymentDir.absolutePath}/repo").include("**/*.jar").exclude("**/*.test/**").getFiles(),
	         "bundles/fpai-core")
}

def generateProperties(ZipOutputStream zos, Iterable dependancyFiles, Iterable fpaiFiles) {
	zos.putNextEntry(new ZipEntry("etc/config.properties"));
	new OutputStreamWriter(zos).withPrintWriter { w ->
		w.println("org.osgi.framework.storage.clean=onFirstInit");
		w.println()
		w.println("felix.startlevel.framework=1");
		w.println("felix.startlevel.bundle=3");
		w.println("org.osgi.framework.startlevel.beginning=3");
		w.println()

		// First all the framework stuff
		w.println("felix.auto.start.1=\\");
		for (String name : dependancyFiles) {
			w.println("\tfile:./${name} \\")
		}
		w.println()

		// Then add the fpai bundles
		w.println("felix.auto.start.2=\\");
		for (String name : fpaiFiles) {
		    w.println("\tfile:./${name} \\");
		}
		w.println()

		w.println("felix.auto.deploy.dir=bundles/fpai-apps");
		w.println("felix.auto.deploy.action=install,update,start");
		w.println("#org.osgi.framework.security=osgi");
	}
}

task(generateDeploymentZip, dependsOn: [cleanDeployment, releaseBundles]) {
	def deployDir = file("${cnf.projectDir}/deployment")
	ext.dependancies = 'https://raw.githubusercontent.com/flexiblepower/bundle-hub/split-repos/run/index.xml'
	if(deployDir.exists() && deployDir.isDirectory()) {
		doFirst {
			def zipfile = file("${deploymentDir.absolutePath}/${project.name}-runtime-${qualifier}.zip")
			logger.info("Generating ZIP file: ${zipfile.absolutePath}")
			def zos = new ZipOutputStream(new FileOutputStream(zipfile))

			zipDir(zos, deployDir)
			def dependancyFiles = downloadRepo(zos, dependancies)
			def fpaiFiles = copyRelease(zos)
			zos.putNextEntry(new ZipEntry("bundles/fpai-apps/"))

			generateProperties(zos, dependancyFiles, fpaiFiles)

			zos.close();
		}
	}
}

task(distribute, dependsOn: [cleanDeployment, generateSourceZip, generateBundleZip, generateJavadocZip, generateDeploymentZip]) {
	dependsOn bndProjects().jacocoTestReport
	description "Generation a distribution (e.g. now in ${deploymentDir.absolutePath})"
	doLast {
		ant.symlink(link: "${releaseDir}/${project.name}/${workingBranch}/LATEST",
		            resource: "${releaseDir}/${project.name}/${workingBranch}/${qualifier}",
		            overwrite: true)
	}
}
