package net.powermatcher.simulation.buildutil;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class GenerateTargetPlatformXml {

	public static void main(String[] args) throws IOException {

		File outfile = new File("targetplatform.target");
		FileOutputStream fos = new FileOutputStream(outfile);

		fos.write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n".getBytes());
		fos.write("<?pde version=\"3.6\"?><target name=\"PowerMatcher Simulation Target Platform\" sequenceNumber=\"1\">\n"
				.getBytes());
		fos.write("<!-- THIS FILE IS GENERATED BY net.powermatcher.simulation.buildutil.GenerateTargetPlatformXml IN THIS PROJECT -->\n"
				.getBytes());
		fos.write("<locations>\n".getBytes());
		fos.write("<location path=\"${eclipse_home}\" type=\"Directory\"/>\n".getBytes());
		fos.write("<location path=\"${workspace_loc}/net.powermatcher.simulation.gui/lib\" type=\"Directory\"/>\n"
				.getBytes());

		for (String loc : getGeneratedDirs()) {
			fos.write(("<location path=\"" + loc + "\" type=\"Directory\"/>\n").getBytes());
		}

		for (String loc : getChildDirs("cnf/fpairepo")) {
			fos.write(("<location path=\"" + loc + "\" type=\"Directory\"/>\n").getBytes());
		}

		for (String loc : getChildDirs("cnf/buildrepo")) {
			fos.write(("<location path=\"" + loc + "\" type=\"Directory\"/>\n").getBytes());
		}

		for (String loc : getChildDirs("cnf/cache")) {
			fos.write(("<location path=\"" + loc + "\" type=\"Directory\"/>\n").getBytes());
		}
		
		fos.write("</locations>\n".getBytes());
		fos.write("</target>\n".getBytes());
		fos.close();

		System.out.println("Done");
	}

	public static List<String> getGeneratedDirs() {
		List<String> res = new ArrayList<String>();
		File workspace = new File("").getAbsoluteFile().getParentFile();
		for (File dir : workspace.listFiles()) {
			File generated = new File(dir.getAbsolutePath() + File.separator + "generated");
			if (dir.isDirectory() && generated.exists()) {
				String line = generated.getAbsolutePath().replace(workspace.getAbsolutePath(), "${workspace_loc}")
						.replace("\\", "/");
				res.add(line);
			}
		}
		return res;
	}

	public static List<String> getChildDirs(String dir) {
		List<String> res = new ArrayList<String>();
		File workspace = new File("").getAbsoluteFile().getParentFile();
		File curDir = new File(workspace.getAbsolutePath() + File.separator + dir);
		for (File child : curDir.listFiles()) {
			if (child.isDirectory()) {
				String line = child.getAbsolutePath().replace(workspace.getAbsolutePath(), "${workspace_loc}")
						.replace("\\", "/");
				res.add(line);
			}
		}
		return res;
	}
}
